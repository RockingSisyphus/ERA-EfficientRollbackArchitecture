[系统提示：以下是动态生成的世界状态报告，请根据此信息进行回应。]

# 世界状态报告

## 一、游戏概览

*   **当前游戏版本**: `{{ERA:world_state.game_version}}`
    {{// 用法说明 (方法一：ERA 宏): //}}
    {{// 这是最基础的 ERA 宏用法。`{{ERA:path.to.variable}}` 会被自动替换为 chat 变量中对应路径的值。 //}}
    {{// 此处，它会显示 `world_state.game_version` 的值。 //}}
    {{// 这种方式最简单直观，适用于直接展示变量。 //}}

## 二、首都信息

我们的故事发生在一个名为 **{{ERA:world_state.capital.type}}** 的宏伟城市。

*   **城市人口**: 目前约有 **{{ERA:world_state.capital.population}}** 名居民。
*   **城市描述**: {{ERA:world_state.capital.description}}

## 三、角色创建规则
{{// 用法说明 (ERA 宏处理对象): //}}
{{// 如果 ERA 宏查询的路径指向一个对象或数组，它会自动被转换成一个 JSON 字符串。 //}}
{{// 下面的宏将展示 `world_state.characters.$meta.template` 这个对象的内容。 //}}
在这个世界中，所有新角色都遵循以下基础模板：
```json
{{ERA:world_state.characters.$meta.template}}
```

## 四、动态情报（EJS 模板示例）
{{// 用法说明 (方法二：EJS 模板): //}}
{{// 当需要更复杂的逻辑时，可以使用 EJS 模板。下面的示例将所有逻辑包裹在一个立即调用的异步函数中。//}}
{{// 这种模式 `<%= await (async () => { ... })() %>` 可以创建局部作用域，避免变量污染，是编写复杂 EJS 逻辑的最佳实践。//}}
<%= await (async () => {
  try {
    let output = '<capital_dynamic_report>\n  capital_status:\n';
    const population = getvar('world_state.capital.population', { scope: 'local' });

    if (typeof population === 'number') {
      if (population >= 1000) {
        output += '    - 首都人口已达 ' + population + '，是一个繁荣的大都会。商业活动频繁，文化交流兴盛。';
      } else if (population >= 500) {
        output += '    - 首都人口为 ' + population + '，规模可观，是一个重要的区域中心。';
      } else {
        output += '    - 首都当前人口为 ' + population + '，是一个宁静的小型城市，充满发展潜力。';
      }
    } else {
      output += '    - 无法获取准确的人口数据。';
    }
    
    output += '\n</capital_dynamic_report>';
    return output;
  } catch (e) {
    return '[EJS 脚本错误 (动态情报)]: ' + (e?.message || e);
  }
})() %>

## 五、完整的世界状态数据（调试用）

### 5.1 使用 EJS 模板获取
{{// 用法说明 (EJS 模板输出完整对象): //}}
{{// 同样使用立即调用的异步函数模式，在函数内部处理逻辑并返回最终的字符串。//}}
<%= await (async () => {
  try {
    const worldState = getvar('world_state', { scope: 'local', clone: true });
    if (worldState) {
      return JSON.stringify(worldState, null, 2);
    } else {
      return "[错误: 未能从聊天变量中找到 world_state。]";
    }
  } catch (e) {
    return `[EJS 脚本错误 (完整状态)]: ${e?.message || e}`;
  }
})() %>

### 5.2 使用 ERA 宏获取 (推荐)
{{// 用法说明 (ERA 宏获取完整数据): //}}
{{// 这是获取完整数据的推荐方式，因为它更简洁且由 ERA 框架原生支持。//}}

#### 纯净数据 (不含 $meta)
```json
{{ERA:$ALLDATA}}
```

#### 原始数据 (包含 $meta)
```json
{{ERA-withmeta:$ALLDATA}}
```
