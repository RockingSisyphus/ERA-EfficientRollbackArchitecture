_;const e=new class{moduleName;constructor(e){this.moduleName=e}formatMessage(e,t){return`《ERA-ApiTest》「${this.moduleName}」【${e}】${String(t)}`}debug(e,t){console.debug(this.formatMessage(e,t))}log(e,t){console.log(`%c${this.formatMessage(e,t)}`,'color: #3498db;')}warn(e,t){console.warn(`%c${this.formatMessage(e,t)}`,'color: #f39c12;')}error(e,t,a){const s=this.formatMessage(e,t);a?console.error(`%c${s}`,'color: #e74c3c; font-weight: bold;',a):console.error(`%c${s}`,'color: #e74c3c; font-weight: bold;')}}('ApiTest'),t=[{description:'1.1. 插入一个包含 user 和 items 的基础对象',event:'era:insertByObject',data:{testData:{description:'Initial state for testing',user:{name:'Tester',level:1},items:['apple','banana','cherry'],status:'active'}}},{description:'1.2. 插入 inventory 对象',event:'era:insertByPath',data:{path:'testData.inventory',value:{gold:100,slots:['sword','shield']}}},{description:'1.3. 插入 user.stats 对象',event:'era:insertByPath',data:{path:'testData.user.stats',value:{str:10,dex:8,int:5}}},{description:'1.4. 插入 metadata 对象',event:'era:insertByObject',data:{testData:{metadata:{version:'1.0',author:'Cline'}}}}],a=[{description:'2.1. 更新 user.name',event:'era:updateByPath',data:{path:'testData.user.name',value:'Advanced Tester'}},{description:'2.2. 通过对象合并更新 level 和 status',event:'era:updateByObject',data:{testData:{user:{level:5},status:'idle'}}},{description:'2.3. 直接赋值更新 gold',event:'era:updateByPath',data:{path:'testData.inventory.gold',value:150}}],s=[{description:'3.1. [ByPath] 删除 items 数组的第一个元素',event:'era:deleteByPath',data:{path:'testData.items[0]'}},{description:'3.2. [ByObject] 删除 user.stats 中的 int 属性',event:'era:deleteByObject',data:{testData:{user:{stats:{int:{}}}}}},{description:'3.3. [ByObject] 删除整个 metadata 对象',event:'era:deleteByObject',data:{testData:{metadata:{}}}},{description:'3.4. [ByPath] 删除整个 inventory 对象',event:'era:deleteByPath',data:{path:'testData.inventory'}}];$(()=>{function n(t,a=500){t.forEach((s,n)=>{setTimeout(()=>{e.log('runTestSuite',`[${n+1}/${t.length}] ${s.description}`),eventEmit(s.event,s.data)},n*a)})}e.log('init','ERA API 分组测试脚本已加载'),eventOn(getButtonEvent('Run Insert Tests'),()=>{n(t)}),eventOn(getButtonEvent('Run Update Tests'),()=>{n(a)}),eventOn(getButtonEvent('Run Delete Tests'),()=>{n(s)}),eventOn(getButtonEvent('Get Current Vars'),()=>{e.log('runTestSuite','[Get Current Vars] Triggering era:getCurrentVars'),eventEmit('era:getCurrentVars')}),eventOn('era:writeDone',t=>{const{mk:a,message_id:s,actions:n,selectedMks:r,editLogs:i,stat:o,statWithoutMeta:d,consecutiveProcessingCount:u}=t,c='onWriteDone';!0!==t?.actions?.apiWrite?(e.log(c,`接收到 era:writeDone 事件 (MK: ${a}, MsgID: ${s}, Actions: ${JSON.stringify(n)}, Consecutive: ${u})`),e.debug(c,'--- Event Payload Details ---'),e.debug(c,`Message Key (mk): ${a}`),e.debug(c,`Message ID (message_id): ${s}`),e.debug(c,`Consecutive Processing Count: ${u}`),e.debug(c,`Actions: ${JSON.stringify(n,null,2)}`),e.debug(c,`Selected MKs (selectedMks): ${JSON.stringify(r,null,2)}`),e.debug(c,`Edit Logs (editLogs): ${JSON.stringify(i,null,2)}`),e.debug(c,`Stat (with meta): ${JSON.stringify(o,null,2)}`),e.debug(c,`Stat (without meta): ${JSON.stringify(d,null,2)}`),e.debug(c,'---------------------------')):e.log(c,'检测到 apiWrite 触发的事件，已跳过。')})});
//# sourceMappingURL=index.js.map