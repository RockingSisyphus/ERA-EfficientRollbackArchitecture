var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var s in n)e.o(n,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:n[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t={type:"chat"},n="ERAMetaData",s="stat_data",a="EditLogs",r="SelectedMks",o="era_data",i=new RegExp(`<${o}>({.*?})<\\/${o}>`),l={INSERT_BY_OBJECT:"era:insertByObject",UPDATE_BY_OBJECT:"era:updateByObject",INSERT_BY_PATH:"era:insertByPath",UPDATE_BY_PATH:"era:updateByPath",DELETE_BY_OBJECT:"era:deleteByObject",DELETE_BY_PATH:"era:deleteByPath",GET_CURRENT_VARS:"era:getCurrentVars"},c="era:writeDone",u="era:apiWrite",g="era_debug";let p,d;function f(){!function(e){const t=e.split(/[\s,]+/);p=[],d=[];for(const e of t){if(!e)continue;const t=e.replace(/\*/g,".*?");t.startsWith("-")?d.push(new RegExp(`^${t.slice(1)}$`)):p.push(new RegExp(`^${t}$`))}}(globalThis.localStorage?.getItem(g)||"")}f(),"undefined"!=typeof globalThis&&(globalThis.eraDebug=function(e){globalThis.localStorage?.setItem(g,e),f(),console.log(`%c《ERA-Log》调试模式已更新: %c${e||"(已禁用)"}%c。部分模块可能需刷新页面生效。`,"color: #3498db; font-weight: bold;","color: #f39c12; font-style: italic;","color: #3498db; font-weight: bold;")});const y={mk:""};class h{moduleName;constructor(e){this.moduleName=e||(this._getModuleNameFromStack()||"unknown")}_getModuleNameFromStack(){try{const e=(new Error).stack||"",t=e.split("\n").find(e=>e.includes("/src/ERA变量框架/")&&!e.includes("/utils/log.ts"));if(!t)return console.warn('《ERA-Log-Debug》:无法从堆栈中确定模块名，将使用 "unknown"。堆栈:',e),null;const n=t.match(/src\/ERA变量框架\/([^?:\s)]+)/);if(!n||!n[1])return console.warn("《ERA-Log-Debug》: 正则表达式无法从调用行中提取路径。调用行:",t),null;let s=n[1];return s=s.replace(/\.(vue|ts|js)$/,""),s.replace(/\/index$/,"").replace(/\//g,"-")}catch(e){return console.error("《ERA-Log-Debug》: 解析模块名时发生意外错误。",e),null}}formatMessage(e,t){return`《ERA》${y.mk?`（${y.mk}）`:""}「${this.moduleName}」【${e}】${String(t)}`}debug(e,t,n){if(!(s=this.moduleName)||d.some(e=>e.test(s))||0===p.length||!p.some(e=>e.test("all")||e.test(s)))return;var s;const a=this.formatMessage(e,t);void 0!==n?console.debug(a,n):console.debug(a)}log(e,t,n){const s=this.formatMessage(e,t);void 0!==n?console.log(`%c${s}`,"color: #3498db;",n):console.log(`%c${s}`,"color: #3498db;")}warn(e,t,n){const s=this.formatMessage(e,t);void 0!==n?console.warn(`%c${s}`,"color: #f39c12;",n):console.warn(`%c${s}`,"color: #f39c12;")}error(e,t,n){const s=this.formatMessage(e,t);void 0!==n?console.error(`%c${s}`,"color: #e74c3c; font-weight: bold;",n):console.error(`%c${s}`,"color: #e74c3c; font-weight: bold;")}}const m=new h,b={INIT:[tavern_events.APP_READY],SYNC:["manual_write",u,tavern_events.MESSAGE_RECEIVED,tavern_events.MESSAGE_DELETED,tavern_events.MESSAGE_SWIPED,tavern_events.CHAT_CHANGED,"manual_sync","manual_full_sync","combo_sync"],API:Object.values(l),UPDATE_MK_ONLY:[tavern_events.MESSAGE_SENT],COLLISION_DETECTORS:[tavern_events.GENERATION_STARTED],COMBO_STARTERS:[tavern_events.MESSAGE_UPDATED]},E=new Map([[tavern_events.MESSAGE_SWIPED,{next:tavern_events.GENERATION_STARTED,maxInterval:600}]]),w=new Map([[tavern_events.MESSAGE_UPDATED,{next:tavern_events.GENERATION_STARTED,resultType:"combo_sync",maxInterval:1600}]]),O=new Map([[tavern_events.MESSAGE_SWIPED,500],[tavern_events.MESSAGE_UPDATED,1500]]);function S(e){return b.INIT.includes(e)?"INIT":b.SYNC.includes(e)?"SYNC":b.API.includes(e)?"API":b.UPDATE_MK_ONLY.includes(e)?"UPDATE_MK_ONLY":b.COLLISION_DETECTORS.includes(e)?"COLLISION_DETECTORS":b.COMBO_STARTERS.includes(e)?"COMBO_STARTERS":"UNKNOWN"}function M(e){const t=_.cloneDeep(e),n=[];for(const t of e){if(0===n.length){n.push(t);continue}const e=n[n.length-1],s=t.timestamp-e.timestamp,a=w.get(e.type);if(a&&t.type===a.next){if(s<=a.maxInterval){m.debug("mergeEventBatch",`检测到事件组合: ${e.type} 和 ${t.type} (时间差: ${s}ms <= ${a.maxInterval}ms)。将合并为 ${a.resultType} 事件。`),n.pop(),n.push({type:a.resultType,timestamp:t.timestamp,detail:t.detail});continue}m.debug("mergeEventBatch",`检测到潜在的事件组合，但因超时而失败: ${e.type} 和 ${t.type} (时间差: ${s}ms > ${a.maxInterval}ms)。`)}const r=E.get(e.type);if(r&&t.type===r.next){if(s<=r.maxInterval){m.debug("mergeEventBatch",`检测到相邻事件对冲: ${e.type} 和 ${t.type} (时间差: ${s}ms <= ${r.maxInterval}ms)。将忽略这两个事件。`),n.pop();continue}m.debug("mergeEventBatch",`检测到潜在的事件对冲，但因超时而失败: ${e.type} 和 ${t.type} (时间差: ${s}ms > ${r.maxInterval}ms)。`)}const o=S(e.type);o===S(t.type)&&"SYNC"===o?n[n.length-1]=t:n.push(t)}const s=n.filter(e=>{const t=S(e.type),n="COLLISION_DETECTORS"===t,s="COMBO_STARTERS"===t;return(n||s)&&m.debug("mergeEventBatch",`清理未配对的事件: ${e.type}`),!n&&!s});return m.debug("mergeEventBatch",`事件合并: ${t.length} -> ${s.length}`,{before:t.map(e=>e.type),after:s.map(e=>e.type)}),s}const v=_;var A=e.n(v);function T(e){if(!A().isObject(e))return e;const t=A().cloneDeep(e);return function e(t){if(Array.isArray(t))t.forEach(t=>e(t));else if(A().isPlainObject(t))for(const n in t)n.startsWith("$")?delete t[n]:e(t[n])}(t),t}function D(){const e=getVariables(t)||{};return{meta:A().get(e,n,{}),stat:A().get(e,s,{})}}async function C(e){await updateVariablesWith(async t=>{const n=A().get(t,s,{}),a=await e(n);return A().set(t,s,a),t},t)}async function I(e){await updateVariablesWith(async t=>{const s=A().get(t,n,{}),a=await e(s);return A().set(t,n,a),t},t)}function k(e){if(!e.includes("{{"))return e;let t=e;return t=t.replace(/{{user}}/gi,SillyTavern.name1),t=t.replace(/{{char}}/gi,SillyTavern.name2),t}const N=new h;function R(e){if(!e)return null;let t=null;if("string"==typeof e.mes)t=e.mes;else if(Array.isArray(e.swipes)){const n=Number(e.swipe_id??0);t=e.swipes[n]||null}else"string"==typeof e.message&&(t=e.message);return null===t?null:k(t)}function L(e){const t=function(e){if("string"!=typeof e)return null;const t=e.match(i);if(!t||!t[1])return null;try{const e=t[1],n=e.match(/"era-message-key"\s*=\s*"(.*?)"/),s=e.match(/"era-message-type"\s*=\s*"(.*?)"/);if(n?.[1]&&s?.[1]){const e={"era-message-key":n[1],"era-message-type":s[1]};return N.debug("parseEraData","成功解析 EraData",e),e}return N.debug("parseEraData","未能在 EraData 块中找到完整的键值对",{customFormatBlock:e}),null}catch(e){return N.warn("parseEraData","解析 EraData 块时发生异常",e),null}}(R(e));return t?"user"===t["era-message-type"]:"user"===e?.role}async function P(e,t){const n=R(e);N.debug("updateMessageContent","更新前的消息内容:",n),N.debug("updateMessageContent","更新后的消息内容:",t);const s={message_id:e.message_id};if(Array.isArray(e.swipes)){const n=Number(e.swipe_id??0),a=[...e.swipes];a[n]=t,s.swipes=a}else s.message=t;await setChatMessages([s],{refresh:"none"})}function B(e,t){const n=[],s=new RegExp(`<${t}>([\\s\\S]*?)<\\/${t}>`,"g");let a;for(;a=s.exec(e);){const e=V((a[1]||"").trim());e&&n.push(e)}return n}function V(e){if(!e)return e;let t=String(e).trim();return t=t.replace(/^\s*(?:```|~~~)\[a-zA-Z0-9_-\]*\s*\r?\n/,""),t=t.replace(/\r?\n(?:```|~~~)\s*$/,""),t.trim()}const j=new h;function x(e){if(!e)return"";const t=R(e);return function(e){if("string"!=typeof e)return null;const t=e.match(i);if(!t||!t[1])return null;try{const e=t[1],n=e.match(/"era-message-key"\s*=\s*"(.*?)"/),s=e.match(/"era-message-type"\s*=\s*"(.*?)"/);return n?.[1]&&s?.[1]?{"era-message-key":n[1],"era-message-type":s[1]}:null}catch{return null}}(t)?.["era-message-key"]||""}async function K(e){if(!e||"number"!=typeof e.message_id||!e.role)return j.warn("ensureMessageKey",`无效的消息对象结构，无法确保Key。msg=${JSON.stringify(e)}`),{mk:"",isNew:!1};const t=x(e);if(t)return{mk:t,isNew:!1};const n=`era_mk_${Date.now()}_${Math.random().toString(36).slice(2,8)}`,s="user"===e.role?"user":"assistant",a=`<${o}>{"era-message-key"="${n}","era-message-type"="${s}"}</${o}>`;j.log("ensureMessageKey",`为消息 (ID: ${e.message_id}) 注入新的Key: ${n}`);const r=a+"\n"+(R(e)??"");return await P(e,r),{mk:n,isNew:!0}}const H=async()=>{const e=getChatMessages(-1,{include_swipes:!0})?.[0];if(!e||"number"!=typeof e.message_id)return;const{mk:t}=await K(e);t&&await I(n=>{const s=_.get(n,r,[]);return s[e.message_id]!==t&&(s[e.message_id]=t,_.set(n,r,s)),n})},J=z,W=new h,Y=J.z.object({强制重载功能:J.z.boolean().default(!1),强制重载消息数:J.z.number().default(2)}).prefault({});function F(){let e;e||(e=Y.parse(getVariables({type:"script",script_id:getScriptId()})),W.debug("initializeExternalSettings","写入变量:",e),insertVariables(e,{type:"script",script_id:getScriptId()}))}$(()=>{F()});const U=new h,G={".":"__DOT__",'"':"__DQUOTE__","'":"__SQUOTE__"},Q=_.invert(G),Z=new RegExp(Object.keys(G).map(_.escapeRegExp).join("|"),"g"),q=new RegExp(Object.values(G).map(_.escapeRegExp).join("|"),"g");function X(e){if(Array.isArray(e))return e.map(e=>X(e));if(_.isPlainObject(e)){const t={};for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){t[n.replace(Z,e=>G[e])]=X(e[n])}return t}return"string"==typeof e?e.replace(Z,e=>G[e]):e}function ee(e){if(Array.isArray(e))return e.map(e=>ee(e));if(_.isPlainObject(e)){const t={};for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){t[n.replace(q,e=>Q[e])]=ee(e[n])}return t}return"string"==typeof e?e.replace(q,e=>Q[e]):e}function te(e){if(Array.isArray(e))return e.map(e=>Array.isArray(e)||_.isPlainObject(e)?JSON.stringify(e):e);if(_.isPlainObject(e)){const t={};for(const n in e)t[n]=te(e[n]);return t}return e}const ne=e=>{try{return JSON.stringify(e,null,2)}catch(e){return`<<stringify失败: ${e?.message||e}>>`}};function se(e,t){return _.mergeWith(_.cloneDeep(e),_.cloneDeep(t),(e,t)=>{if(Array.isArray(e)||Array.isArray(t))return t})}function ae(e){if(Array.isArray(e))return e;if(e&&"object"==typeof e)return[e];if("string"==typeof e){const t=e.replace(/^\s*```(?:json)?\s*|\s*```\s*$/g,"");try{const e=JSON.parse(t);return Array.isArray(e)?e:[]}catch{return[]}}return[]}function re(e){const t=[];if(!e||"string"!=typeof e)return t;const n=function(e){if(!e)return"";let t="",n=!1;for(let s=0;s<e.length;s++){const a=e[s];if('"'!==a||0!==s&&"\\"===e[s-1]||(n=!n),n){t+=a;continue}const r=e[s+1];if("/"===a&&"/"===r){const n=e.indexOf("\n",s+2);if(-1===n)break;t+="\n",s=n;continue}if("/"===a&&"*"===r){const t=e.indexOf("*/",s+2);if(-1===t)break;s=t+1;continue}if("<"===a&&"\x3c!--"===e.substring(s,s+4)){const t=e.indexOf("--\x3e",s+4);if(-1===t)break;s=t+2;continue}t+=a}return t}(e),s=n.trim();let a=0,r=-1,o=!1;for(let e=0;e<s.length;e++){const n=s[e];if('"'!==n||0!==e&&"\\"===s[e-1]||(o=!o),!o)if("{"===n)0===a&&(r=e),a++;else if("}"===n&&a>0&&(a--,0===a&&-1!==r)){const n=s.substring(r,e+1);try{const e=JSON.parse(n);t.push(e)}catch(e){U.error(`JSONL 解析失败: ${e?.message||e}. 失败的片段: ${n}`,e)}r=-1}}return t}const oe=new h,ie=_.debounce(()=>{eventEmit(u),oe.log("debouncedEmitApiWrite",`已触发合并后的 ${u} 事件。`)},50,{leading:!1,trailing:!0});function le(e){const t={...e,stat:ee(e.stat),statWithoutMeta:ee(e.statWithoutMeta)};oe.debug("emitWriteDoneEvent","writeDone事件广播数据反转义",{before:{stat:e.stat,statWithoutMeta:e.statWithoutMeta},after:{stat:t.stat,statWithoutMeta:t.statWithoutMeta}}),eventEmit(c,t),oe.log("emitWriteDoneEvent",`已触发 ${c} 事件。操作: ${JSON.stringify(e.actions)}, MK: ${e.mk}, MsgID: ${e.message_id}, 连续处理次数: ${e.consecutiveProcessingCount}`)}const ce=new h;async function ue(e){const t=ne(e.blockContent),n=`\n<${e.blockTag}>\n${t}\n</${e.blockTag}>`,s=await function(){const e=getChatMessages("0-{{lastMessageId}}",{include_swipes:!0});if(!e||0===e.length)return N.debug("findLastAiMessage","聊天记录为空, 未找到任何消息。"),null;for(let t=e.length-1;t>=0;t--){const n=e[t];if(!L(n))return N.debug("findLastAiMessage",`找到最后一条 AI 消息, ID: ${n.message_id}`),n}return N.debug("findLastAiMessage","未在聊天记录中找到任何 AI 消息。"),null}();if(!s)return void ce.warn("performApiWrite","找不到任何 AI 消息，无法执行 API 写入。");const a=(R(s)??"")+n;ce.log("performApiWrite",`实时写入 API 任务 (${e.blockTag}) 到消息 ID ${s.message_id}...`),await P(s,a),ie()}function ge(e,t,n){const{type:s,detail:a}=e;var r,o;t.api=!0,s===l.INSERT_BY_OBJECT?ue({blockTag:"VariableInsert",blockContent:a}):s===l.UPDATE_BY_OBJECT?function(e){ue({blockTag:"VariableEdit",blockContent:e})}(a):s===l.INSERT_BY_PATH?(r=a.path,o=a.value,ue({blockTag:"VariableInsert",blockContent:_.set({},r,o)})):s===l.UPDATE_BY_PATH?function(e,t){ue({blockTag:"VariableEdit",blockContent:_.set({},e,t)})}(a.path,a.value):s===l.DELETE_BY_OBJECT?function(e){ue({blockTag:"VariableDelete",blockContent:e})}(a):s===l.DELETE_BY_PATH?function(e){ue({blockTag:"VariableDelete",blockContent:_.set({},e,{})})}(a.path):s===l.GET_CURRENT_VARS&&function(e){le(e)}(n)}const pe=new h;function de(e,t,n,s){const a=t?_.get(e,t):e;if(void 0===a)return void pe.warn("applyDeleteAtLevel",`VariableDelete 跳过：路径不存在 -> ${t||"(root)"}`);const r=_.get(a,["$meta","necessary"]),o=_.get(n,"$meta"),i=_.isPlainObject(o)&&_.isEmpty(o)||_.has(n,["$meta","necessary"]);if(_.isPlainObject(n)&&!_.isEmpty(n)){if("all"===r&&!i)return void pe.warn("applyDeleteAtLevel",`VariableDelete 失败：路径 <${t}> 受 "necessary: all" 保护，其子节点无法被删除。`);for(const a of Object.keys(n)){de(e,t?`${t}.${a}`:a,n[a],s)}return}if("self"===r||"all"===r)return void pe.warn("applyDeleteAtLevel",`VariableDelete 失败：路径 <${t}> 受 "necessary: ${r}" 保护，无法被直接删除。`);if(""===t)return void pe.error("applyDeleteAtLevel","VariableDelete 失败：不允许删除根对象。");const l=_.cloneDeep(a);_.unset(e,t),s.push({op:"delete",path:t,value_old:l}),pe.debug("applyDeleteAtLevel",`成功删除节点: ${t}`)}const fe=new h;function ye(e,t){if(!e)return;const n=_.get(e,"$template"),s=_.get(e,t);if(_.isPlainObject(n)&&_.isPlainObject(s)){fe.debug("getInheritedTemplateContent",`为子节点 "${t}" 同时找到原型和特异性内容。\n      - 原型: ${JSON.stringify(n)}\n      - 特异性: ${JSON.stringify(s)}`);const e=se(_.cloneDeep(n),s);return fe.debug("getInheritedTemplateContent",`  - 合并后: ${JSON.stringify(e)}`),e}return _.isPlainObject(s)?(fe.debug("getInheritedTemplateContent",`为子节点 "${t}" 只找到特异性内容: ${JSON.stringify(s)}`),s):_.isPlainObject(n)?(fe.debug("getInheritedTemplateContent",`为子节点 "${t}" 只找到原型内容: ${JSON.stringify(n)}`),n):void fe.debug("getInheritedTemplateContent",`在父级模板内容中未为子节点 "${t}" 找到任何可继承的规则。`)}const _e=new h;function he(e,t,n,s,a,r){const o=function(e,t){const n=_.get(t,"$template");fe.debug("resolveTemplate",`解析出的模板内容:\n    - 继承: ${JSON.stringify(e)}\n    - 父节点变量: ${JSON.stringify(n)}`);let s={};return s=se(s,e),s=se(s,n),fe.debug("resolveTemplate",`合并后的最终模板内容: ${JSON.stringify(s)}`),_.isEmpty(s)?null:s}(a,r);_e.debug("applyInsertAtLevel",`[入口] basePath: "${t||"root"}"`,{statData:_.cloneDeep(e)});const i=t?_.get(e,t):e;if(_e.debug("applyInsertAtLevel",`[路径检查] at path: "${t||"root"}". currentNodeInVars 的值:`,i),t&&void 0===i){const a=function(e,t){if(fe.debug("applyTemplateToPatch",`[进入] 模板内容: ${JSON.stringify(e)}, 补丁: ${JSON.stringify(t)}`),!_.isPlainObject(t))return fe.debug("applyTemplateToPatch","[退出] 补丁不是一个普通对象，直接返回。"),t;if(!e)return fe.debug("applyTemplateToPatch","[退出] 模板内容无效，直接返回补丁。"),t;if(_.isEmpty(t))return fe.debug("applyTemplateToPatch","补丁为空对象，完全使用模板内容。"),_.cloneDeep(e);const n=se(_.cloneDeep(e),t);return fe.debug("applyTemplateToPatch",`合并模板与补丁后的结果: ${JSON.stringify(n)}`),n}(o,n),r=te(a);return _e.debug("applyInsertAtLevel",`最终插入数据 at ${t}:\n${JSON.stringify(r,null,2)}`),_.set(e,t,r),s.push({op:"insert",path:t,value_new:_.cloneDeep(r)}),void _e.debug("applyInsertAtLevel",`原子性插入到新路径: ${t}`)}if(_.isPlainObject(i)&&_.isPlainObject(n)){_e.debug("applyInsertAtLevel",`[递归补充] at path: "${t||"root"}"\n      - 当前层级模板 (localTplContent): ${JSON.stringify(o)}`);for(const a of Object.keys(n)){const r=t?`${t}.${a}`:a,l=n[a],c=ye(o,a);_e.debug("applyInsertAtLevel",`  - 准备递归子节点: "${a}"\n      - 将传递给子节点的模板 (subInheritedContent): ${JSON.stringify(c)}`),he(e,r,l,s,c,i)}}else t&&_e.warn("applyInsertAtLevel",`VariableInsert 失败：路径已存在且无法递归补充 -> ${t}`)}const me=new h;async function be(e,r=!1){try{me.log("rollbackByMk",`开始回滚, MK=${e}`),await updateVariablesWith(t=>{const r=_.get(t,n,{}),o=_.get(t,s,{}),i=ae(_.get(r,[a,e]));if(!i||!i.length)return me.debug("rollbackByMk","EditLog 为空或无效，跳过回滚。"),t;for(let e=i.length-1;e>=0;e--){const t=i[e],n=String(t?.op||"").toLowerCase(),s=String(t?.path||"");s&&("insert"!==n?"update"!==n&&"delete"!==n||(void 0===t?.value_old?_.unset(o,s):_.set(o,s,_.cloneDeep(t.value_old))):_.unset(o,s))}return _.set(t,s,o),t},t),me.log("rollbackByMk",`回滚完成：MK=${e}`)}catch(t){me.error("rollbackByMk",`回滚异常：MK=${e} → ${t?.message||t}`,t)}}async function $e(e,t){me?.debug("findLatestNewValue",`开始为路径 <${e}> 从消息ID <${t}> 向上追溯历史值...`);const n=getChatMessages("0-{{lastMessageId}}",{include_swipes:!1});if(!n||n.length<1)return me?.debug("findLatestNewValue","消息历史为空，无法追溯。"),null;const s=n.findIndex(e=>e.message_id===t);if(-1===s)return me?.warn("findLatestNewValue",`错误：在消息列表中未找到起始消息ID: ${t}`),null;for(let t=s-1;t>=0;t--){const s=n[t],r=s?.message_id;if(me?.debug("findLatestNewValue",`[进度] 正在检查消息 (ID: ${r})，内容: "${(R(s)||"").substring(0,100)}..."`),L(s)||"number"!=typeof r)continue;const o=x(s);if(!o){me?.debug("findLatestNewValue",`[进度] 消息 (ID: ${r}) 无 MK，跳过。`);continue}const{meta:i}=D(),l=ae(_.get(i,[a,o]));if(l&&0!==l.length){me?.debug("findLatestNewValue",`[进度] 正在检查 MK ${o} 的 EditLog...\n${ne(l)}`);for(let t=l.length-1;t>=0;t--){const n=l[t];if(n&&n.path){if(n.path===e)return"delete"===n.op?(me?.error("findLatestNewValue",`>> 状态异常! 在消息(ID:${s.message_id}, MK:${o})中为路径 <${e}> 找到了 'delete' 记录。这表明 update 操作可能正在尝试修改一个已被删除的变量。`),null):(me?.debug("findLatestNewValue",`>> 成功! 在消息(ID:${s.message_id}, MK:${o})中找到精确路径 <${e}> 的值为: ${ne(n.value_new)}`),_.cloneDeep(n.value_new));if(e.startsWith(n.path+".")){const t=e.substring(n.path.length+1),a=n.value_new;if(_.isPlainObject(a)&&_.has(a,t)){const e=_.get(a,t);return me?.debug("findLatestNewValue",`>> 成功! 在消息(ID:${s.message_id}, MK:${o})中找到父级路径 <${n.path}>, 并从中提取子路径 <${t}> 的值为: ${ne(e)}`),_.cloneDeep(e)}}}}}else me?.debug("findLatestNewValue",`[进度] MK ${o} 的 EditLog 为空，跳过。`)}return me?.debug("findLatestNewValue",`向上追溯未找到路径 ${e} 的任何历史值，将使用 null 作为旧值`),null}const Ee=new h;async function we(e,t,n,s,a,r){const o=t?_.get(e,t):e;if(void 0===o)return void Ee.warn("applyEditAtLevel",`VariableEdit 跳过：路径不存在 -> ${t||"(root)"}`);const i=_.get(o,["$meta","updatable"],!0),l=!1===i&&!0===_.get(n,["$meta","updatable"]);if(!1!==i||l)for(const o of Object.keys(n)){const i=t?`${t}.${o}`:o,l=n[o];if(_.isPlainObject(l)){await we(e,i,l,s,a,r);continue}if(!_.has(e,i)){Ee.warn("applyEditAtLevel",`VariableEdit 失败：路径非法，无法写入 -> ${i}`);continue}Ee.debug("applyEditAtLevel",`[旧值查找] 准备为路径 <${i}> 从消息 ID <${a}> 向上追溯...`);let c=await $e(i,a);null===c?(c=_.get(e,i),Ee.debug("applyEditAtLevel",`[旧值查找] 追溯未找到历史值，从当前 stat_data 中获取到旧值: ${JSON.stringify(c)}`)):Ee.debug("applyEditAtLevel",`[旧值查找] 追溯成功，找到历史旧值: ${JSON.stringify(c)}`);const u=te(l);_.set(e,i,u),s.push({op:"update",path:i,value_old:_.cloneDeep(c),value_new:_.cloneDeep(u)}),r.set(i,_.cloneDeep(u))}else Ee.warn("applyEditAtLevel",`VariableEdit 失败：路径 <${t}> 受 "$meta.updatable: false" 保护，无法被修改。`)}const Oe=new h,Se=async e=>{Oe.debug("ApplyVarChangeForMessage","开始处理消息...",{msg:e});try{if(!e||"number"!=typeof e.message_id)return Oe.warn("ApplyVarChangeForMessage","无效消息对象或缺少 message_id，退出"),null;const t=e.message_id,n=x(e);if(!n)return Oe.debug("ApplyVarChangeForMessage",`消息 (ID: ${t}) 不含 MK，跳过变量写入。`),null;if(L(e))return Oe.debug("ApplyVarChangeForMessage",`消息 (ID: ${t}) 为用户消息，跳过变量写入，但保留其 MK。`),n;const s=R(e)||"",r=B(s,"VariableInsert"),o=B(s,"VariableEdit"),i=B(s,"VariableDelete");r.length||o.length||i.length||Oe.debug("ApplyVarChangeForMessage",`消息 (ID: ${t}) 未检测到变量修改标签。`);const l=r.flatMap(e=>re(e)),c=o.flatMap(e=>re(e)),u=i.flatMap(e=>re(e)),g=X(l),p=X(c),d=X(u);Oe.debug("ApplyVarChangeForMessage","数据转义完成",{before:{inserts:l,edits:c,deletes:u},after:{inserts:g,edits:p,deletes:d}});const f=[];await async function(e,t){if(e.length>0){await C(async e=>(_e.debug("processInsertBlocks","[初始状态] 进入 processInsertBlocks 时的 statData:",_.cloneDeep(e)),e));for(const n of e)if(_.isPlainObject(n)&&!_.isEmpty(n))try{await C(e=>(_e.debug("processInsertBlocks",`处理 insertRoot: ${JSON.stringify(n)}`),he(e,"",n,t,null,null),e))}catch(e){_e.error("processInsertBlocks",`处理 insertRoot 失败: ${e?.message||e}`,e)}_e.log("processInsertBlocks","所有 VariableInsert 操作完成")}}(g,f),await async function(e,t,n){if(e.length>0){const s=new Map;for(const a of e)if(_.isPlainObject(a)&&!_.isEmpty(a))try{await C(async e=>(Ee.debug("processEditBlocks",`处理 editRoot: ${JSON.stringify(a)}`),await we(e,"",a,t,n,s),e))}catch(e){Ee.error("processEditBlocks",`处理 editRoot 失败: ${e?.message||e}`,e)}Ee.log("processEditBlocks","所有 VariableEdit 操作完成")}}(p,f,t),await async function(e,t){if(e.length>0){for(const n of e)if(_.isPlainObject(n)&&!_.isEmpty(n))try{await C(e=>(pe.debug("processDeleteBlocks",`处理 deleteRoot: ${JSON.stringify(n)}`),de(e,"",n,t),e))}catch(e){pe.error("processDeleteBlocks",`处理 deleteRoot 失败: ${e?.message||e}`,e)}pe.log("processDeleteBlocks","所有 VariableDelete 操作完成")}}(d,f);try{await I(e=>{const s=Array.isArray(f)?f:ae(f);return Oe.debug("ApplyVarChangeForMessage",`准备为 MK=${n} (MsgID=${t}) 写入 EditLog:\n${JSON.stringify(s,null,2)}`),_.set(e,[a,n],JSON.stringify(s)),e}),Oe.debug("ApplyVarChangeForMessage",`成功为 MK=${n} 写入 EditLog。`)}catch(e){Oe.error("ApplyVarChangeForMessage",`为 MK=${n} 写入 EditLogs 失败: ${e?.message||e}`,e)}return n}catch(e){return Oe.error("ApplyVarChangeForMessage",`变量写入器异常: ${e?.message||e}`,e),null}},Me=new h,ve=e=>{const t=x(e);return t||null},Ae=async(e=!1)=>{e?Me.warn("resyncStateOnHistoryChange","强制完全重算模式已启动！"):Me.log("resyncStateOnHistoryChange","聊天记录变更，启动状态同步...");const t=getChatMessages("0-{{lastMessageId}}",{include_swipes:!0});Me.debug("resyncStateOnHistoryChange","获取到的 allMessages:",t);const{meta:n}=D(),s=_.cloneDeep(_.get(n,r,[]));if(Me.debug("resyncStateOnHistoryChange",`状态快照: oldSelectedMks.length=${s.length}, allMessages.length=${t?.length??0}`),!t||0===t.length)return void Me.log("resyncStateOnHistoryChange","当前聊天记录为空，不执行任何操作，同步终止。");let o=-1;if(e)o=0,Me.log("resyncStateOnHistoryChange","强制模式：设置重算起点为 0。");else if(t.length<s.length){Me.log("resyncStateOnHistoryChange","检测到消息删除。");for(let e=t.length-1;e>=0;e--){const n=ve(t[e]),a=s[e];if(Me.debug("resyncStateOnHistoryChange",`[删除-对齐检查] i=${e}, currentMk=${n}, recordedMk=${a}`),n===a){o=e+1,Me.log("resyncStateOnHistoryChange",`找到对齐点于 message_id=${e} (MK=${n})。将从 ID ${o} 开始检查。`);break}}-1===o&&(o=0,Me.log("resyncStateOnHistoryChange","未找到任何对齐点，将从头开始检查。"));const e=t.map(ve).filter(e=>e),n=s.filter(e=>e),i=_.difference(n,e);if(Me.debug("resyncStateOnHistoryChange",`旧MK序列: [${n.join(", ")}]`),Me.debug("resyncStateOnHistoryChange",`新MK序列: [${e.join(", ")}]`),Me.debug("resyncStateOnHistoryChange",`计算出的被删除MK: [${i.join(", ")}]`),i.length>0&&(e=>{const{meta:t}=D();for(const n of e)if(n&&ae(_.get(t,[a,n])).length>0)return!1;return!0})(i)){Me.log("resyncStateOnHistoryChange",`检测到被删除的 ${i.length} 条消息均不含变量修改，执行快速同步。`);const e=[];for(let n=0;n<t.length;n++)e[n]=ve(t[n]);return await I(t=>(_.set(t,r,e),t)),void Me.log("resyncStateOnHistoryChange","快速同步完成，仅修正 SelectedMks 数组。")}}else if(t.length===s.length){Me.log("resyncStateOnHistoryChange","检测到消息长度不变，可能为修改或切换。");for(let e=t.length-1;e>=0;e--){const n=ve(t[e]),a=s[e];Me.debug("resyncStateOnHistoryChange",`[切换-对齐检查] i=${e}, currentMk=${n}, recordedMk=${a}`),n!==a&&(o=e)}-1===o?(o=t.length>0?t.length-1:0,Me.log("resyncStateOnHistoryChange",`所有MK均匹配。启动模拟写入，强制重算最后一条消息 (ID: ${o})。`)):Me.log("resyncStateOnHistoryChange",`找到最早的不匹配点于 message_id=${o}。将从该点开始重算。`)}else Me.log("resyncStateOnHistoryChange","检测到消息添加。"),o=s.length,Me.log("resyncStateOnHistoryChange",`新增消息的写入逻辑已由同步流程接管。将从新增消息 (ID: ${o}) 开始处理。`);if(o>-1){const e=s.slice(o).filter(e=>e);if(e.length>0){Me.log("resyncStateOnHistoryChange",`准备回滚 ${e.length} 个MK: [${e.join(", ")}]`);for(const t of e.reverse())Me.debug("resyncStateOnHistoryChange",`[回滚] 正在回滚 MK: ${t}`),await be(t,!0);Me.log("resyncStateOnHistoryChange","逆序回滚完成。")}}Me.log("resyncStateOnHistoryChange",`从 ID ${o} 开始顺序重算...`);const i=s.slice(0,o);for(let e=o;e<t.length;e++){const n=t[e];Me.debug("resyncStateOnHistoryChange",`[重算] 正在处理消息索引: ${e}`);const s=await Se(n);i[e]=s}Me.log("resyncStateOnHistoryChange","顺序重算完成。"),await I(e=>(_.set(e,r,i),e)),Me.log("resyncStateOnHistoryChange","状态同步完成。")},Te=new h;async function De(e){const t=getChatMessages(e);if(!t||0===t.length)return void Te.warn("forceRenderMessage",`找不到消息ID为 ${e} 的消息。`);const n=t[0];await setChatMessages([{message_id:e,message:n.message}]),Te.debug("forceRenderMessage",`已使用 setChatMessages 刷新消息 ${e}。`)}const Ce=new h;async function Ie(e,t,n){const{type:s}=e;Ce.debug("handleSyncEvent",`事件 ${s} 触发状态同步流程...`);const a="manual_full_sync"===s;await Ae(a),t.resync=!0,"combo_sync"!=s&&async function(){const e=getVariables({type:"script",script_id:getScriptId()});if(!_.get(e,"强制重载功能",!1))return void Te.debug("forceRenderRecentMessages","强制重载功能未启用, 跳过。");const t=_.get(e,"强制重载消息数",1);Te.log("forceRenderRecentMessages",`开始强制重载, 数量: ${t}`),await new Promise(e=>setTimeout(e,1e3));const n=getChatMessages("0-{{lastMessageId}}");if(!n||0===n.length)return void Te.warn("forceRenderRecentMessages","无法获取到任何消息, 终止重载。");const s=n.slice(-t);for(const e of s)Te.debug("forceRenderRecentMessages",`正在强制渲染消息: ${e.message_id}`),await De(e.message_id),await new Promise(e=>setTimeout(e,100));Te.log("forceRenderRecentMessages","强制重载完成。")}(),await H(),le(n)}const ke=new h;let Ne=null;function Re(){const e=y.mk;return e&&Ne&&Ne.mk===e?(ke.debug("updateConsecutiveMkCount",`连续处理写入/同步操作的 MK: ${e}。旧计数: ${Ne.count}，新计数: ${Ne.count+1}`),Ne.count++):(ke.debug("updateConsecutiveMkCount",`新的写入/同步操作的 MK: ${e}。重置计数为 1。前一个 MK 是: ${Ne?.mk}`),Ne={mk:e,count:1}),Ne.count}async function Le(e,t){const{type:n}=e,s=S(n);let o=null;const i={rollback:!1,apply:!1,resync:!1,api:!1,apiWrite:!1};try{const{mk:l,message_id:c,isNewKey:u}=await(async()=>{try{const e=getChatMessages(-1,{include_swipes:!0})?.[0];if(j.debug("ensureMkForLatestMessage",`获取到的最新消息对象 (msg): ${JSON.stringify(e)}`),!e||"number"!=typeof e.message_id)return j.warn("ensureMkForLatestMessage","无法读取最新消息或其ID，退出"),{mk:"",message_id:null,isNewKey:!1};const{mk:t,isNew:n}=await K(e);return j.log("ensureMkForLatestMessage",`已为最新消息 ${e.message_id} 确保 MK 存在。 (是否新建: ${n})`),{mk:t,message_id:e.message_id,isNewKey:n}}catch(e){return j.error("ensureMkForLatestMessage",`确保MK时异常: ${e?.message||e}`,e),{mk:"",message_id:null,isNewKey:!1}}})();if(!l||null===c)return ke.warn("dispatchAndExecuteTask","无法获取有效的 MK 或消息 ID，跳过任务执行。"),t;y.mk=l,o=c,u&&l&&(t={mk:l,ignoreCount:1});const{shouldSkip:g,newIgnoreRule:p}=function(e,t,n){return n&&e===tavern_events.CHARACTER_MESSAGE_RENDERED&&t===n.mk?(ke.log("handleRedundantRenderEvent",`忽略由 MK (${n.mk}) 注入触发的冗余渲染事件。剩余忽略次数: ${n.ignoreCount-1}`),n.ignoreCount--,n.ignoreCount<=0&&(n=null,ke.log("handleRedundantRenderEvent","忽略次数用完")),{shouldSkip:!0,newIgnoreRule:n}):{shouldSkip:!1,newIgnoreRule:n}}(n,l,t);if(t=p,g)return t;ke.log("dispatchAndExecuteTask",`执行任务: ${n} (分组: ${s})`);const{meta:d,stat:f}=D(),h={mk:l,message_id:o,actions:i,selectedMks:_.get(d,r,[]),editLogs:_.get(d,a,{}),stat:f,statWithoutMeta:T(f),consecutiveProcessingCount:1};switch(s){case"INIT":F(),h.consecutiveProcessingCount=Re(),await Ie(e,i,h);break;case"SYNC":h.consecutiveProcessingCount=Re(),await Ie(e,i,h);break;case"API":ge(e,i,h);break;case"UPDATE_MK_ONLY":await async function(){await H()}()}}catch(e){ke.error("dispatchAndExecuteTask",`事件 ${n} 处理异常: ${e}`,e)}finally{y.mk=""}return t}const Pe=new h,Be=[];let Ve=!1,je=!1,xe=null;function Ke(e,t){Pe.debug("pushToQueue",`接收到事件: ${e}，已推入队列。`,{detail:t}),Be.push({type:e,detail:t,timestamp:Date.now()}),async function(){if(je)return void Pe.debug("processQueue","已有处理函数在排队等待，本次调用忽略。");Ve&&(Pe.debug("processQueue","处理器忙碌，进入排队等待状态..."),je=!0,await new Promise(e=>{xe=e}),je=!1,Pe.debug("processQueue","等待结束，获取到处理权。"));if(0===Be.length)return void Pe.debug("processQueue","队列为空，无需处理。");Ve=!0,Pe.log("processQueue","处理器启动");const e=Be[0];if("API"!==S(e.type)){const t=O.get(e.type)??300;Pe.log("processQueue",`启动事件收集窗口，等待 ${t}ms...`),await new Promise(e=>setTimeout(e,t))}Pe.debug("processQueue","事件收集窗口关闭，准备处理的队列内容:",JSON.stringify(Be.map(e=>e.type)));let t=null;for(;Be.length>0;){const e=Be.splice(0,Be.length),n=M(e);Pe.debug("processQueue",`开始处理一个新批次，包含 ${e.length} 个原始事件，合并后为 ${n.length} 个任务。`);for(const e of n){t=await Le(e,t)}Pe.debug("processQueue","本轮批次处理完毕。")}if(Ve=!1,Pe.log("processQueue","处理器空闲，已释放锁。"),xe){Pe.debug("processQueue","通知排队的处理器开始工作。");const e=xe;xe=null,e()}}()}const He=new h;$(()=>{registerMacroLike(/{{\s*ERA(-withmeta)?\s*:\s*([^}]+?)\s*}}/gi,(e,t,n,s)=>function(e){if(!e.includes("{{ERA"))return e;const{stat:t}=D();return t?e.replace(/{{\s*ERA(-withmeta)?\s*:\s*([^}]+?)\s*}}/gi,(e,n,s)=>{const a=s.trim(),r=!!n;let o;if(o="$ALLDATA"===a?t:_.get(t,a),void 0===o)return He.warn("parseEraMacros",`在 stat_data 中未找到路径 "${a}", 宏将替换为空字符串.`),"";const i=r?o:T(o),l=ee(i);return He.debug("parseEraMacros",`宏替换数据反转义: ${a}`,{before:i,after:l}),"object"==typeof l&&null!==l?JSON.stringify(l):String(l)}):(He.warn("parseEraMacros","无法获取到 stat_data, 宏替换失败."),e)}(t))});const Je=$;var We=e.n(Je);const Ye=new h;let Fe=null;function Ue(e){if("object"!=typeof e||null===e)return`<span style="color: #98fb98;">${String(e)}</span>`;let t='<ul style="list-style-type: none; padding-left: 20px; margin: 0;">';for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){t+="<li>",t+=`<strong style="color: #87ceeb;">${n}:</strong> `,t+=Ue(e[n]),t+="</li>"}return t+="</ul>",t}function Ge(e){if(Fe){const t=Ue(Fe);e.html(t)}else e.html("数据加载中...")}const Qe=`era-status-bar-${getScriptId()}`;let ze=!1;const Ze={width:"50px",height:"50px","border-radius":"50%",bottom:"20px",left:"20px",top:"",right:"",cursor:"pointer","justify-content":"center","align-items":"center",display:"flex",overflow:"hidden"},qe={width:"300px",height:"200px","border-radius":"10px",cursor:"default",padding:"12px",display:"block"};function Xe(){if(We()(`#${Qe}`).length>0)return;const e=We()("<div>").attr("id",Qe).css({position:"fixed","background-color":"rgba(0, 0, 0, 0.7)",color:"white","font-size":"14px","z-index":"10000","border-top":"1px solid #444",transition:"all 0.3s ease-in-out",...Ze}).html("<span>ERA</span>"),t=We()("<div>").css({display:"none","overflow-y":"auto",height:"100%"});return e.append(t),We()("body").append(e),e.draggable({handle:`#${Qe}`,containment:"window"}),e.on("click",()=>{setTimeout(()=>{e.hasClass("ui-draggable-dragging")||function(e,t){ze=!ze,ze?(e.css(qe),e.find("span").hide(),t.show(),Ge(t)):(e.css(Ze),e.find("span").show(),t.hide())}(e,t)},50)}),e}function et(){We()(()=>{const e=Xe();if(!e)return;const t=e.find("div");var n;Ge(n=t),eventOn("era:writeDone",e=>{Ye.debug("initStatusBarContent","接收到 era:writeDone 事件，缓存数据。",e),e&&e.statWithoutMeta&&(Fe=e.statWithoutMeta,n.is(":visible")&&Ge(n))})}),We()(window).on("pagehide",()=>{We()(`#${Qe}`).remove()})}et();[...b.INIT,...b.SYNC,...b.API,...b.UPDATE_MK_ONLY,...b.COLLISION_DETECTORS,...b.COMBO_STARTERS].forEach(e=>{eventOn(e,t=>Ke(e,t))}),eventOn(getButtonEvent("写入变量修改"),()=>Ke("manual_write")),eventOn(getButtonEvent("手动同步状态"),()=>Ke("manual_sync")),eventOn(getButtonEvent("强制完全重算"),()=>Ke("manual_full_sync"));